apply plugin: 'com.android.application'
apply plugin: 'nju.plugin'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "android.basics"
        minSdkVersion 17
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField "String", "commitHash", "\"${fetchCommitHash()}\""
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
}

String fetchCommitHash() {
    return "git rev-parse --short HEAD".execute().text.trim()
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

afterEvaluate { // 在afterEvaluate中,gradle才完成这个task的创建，才能找到这个任务实例
    def targetTask = project.tasks.findByName("assembleDebug")
    targetTask.doLast { // 每个task都可以挂任意数量的doFirst/doLast
        println("GRADLE IS SO POWERFUL.\n")
    }
    targetTask.outputs.upToDateWhen { // gradle task 有up-to-date机制
        false
    }
}

task NjuTask1(type: DefaultTask) {  // 这个闭包是用于配置task的闭包，不是task action
    println("This is NJU Task1 at configuration time.")
}

afterEvaluate { // 也可以在这里增加task，从而可以配置一些依赖关系
    def targetTask = project.tasks.findByName("assembleDebug")
    project.tasks.create("NjuTask2") {
        it.dependsOn targetTask
    }
}

task NjuTask3(type: NjuTaskType) {

}

class NjuTaskType extends DefaultTask {
    @TaskAction
    public void foo() {
        println("NJU Task type at executing time.")
    }
}
